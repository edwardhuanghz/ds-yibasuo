---

# check
- name: detect outbound network
  shell: >
    warn=no
    curl -s --connect-timeout 10 www.baidu.com 2>/dev/null >/dev/null; echo $?
  changed_when: false
  register: outbound_network_st

- name: set outbound network fact
  set_fact: has_outbound_network={{ outbound_network_st.stdout.strip() == '0' }}

- fail:
    msg: "The Control Machine must have access to the Internet in order to download TiDB and related packages."
  when: not has_outbound_network

#- name: Stop if ansible version is too low, make sure that the Ansible version is Ansible 2.4.2 or later, otherwise a compatibility issue occurs.
#  assert:
#    that:
#      - ansible_version.full|version_compare('2.4.2', '>=')

#- name: detect GFW
#  shell: >
#    warn=no
#    curl -s --connect-timeout 10 google.com 2>/dev/null >/dev/null; echo $?
#  changed_when: false
#  register: gfw_st

#- name: set GFW fact
#  set_fact: under_gfw={{ gfw_st.stdout.strip() != '0' }}

# directory
#- name: create downloads and resources directories
#  file: path="{{ item }}" state=directory mode=0755
#  with_items:
#    - "{{ downloads_dir }}"
#    - "{{ resources_dir }}"
#    - "{{ pkg_dir }}"

- name: create specific deployment method packages.yml
  template: src={{ deployment_method }}_packages.yml.j2 dest={{ playbook_dir }}/conf/{{ deployment_method }}_packages.yml

- include_vars: file={{ playbook_dir }}/conf/{{ deployment_method }}_packages.yml

# download and unarchive
- name: download nginx
  get_url:
    url: "{{ item.url }}"
    dest: "{{ pkg_dir }}/{{ item.name }}-{{ item.version }}.tar.gz"
    checksum: "{{ item.checksum | default(omit) }}"
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  with_items: "{{ nginx_packages }}"
  when: has_outbound_network

- name: download jdk
  get_url:
    url: "{{ item.url }}"
    dest: "{{ pkg_dir }}/{{ item.version }}.tar.gz"
    checksum: "{{ item.checksum | default(omit) }}"
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  with_items: "{{ jdk_packages }}"
  when: has_outbound_network

- name: download zookeeper
  get_url:
    url: "{{ item.url }}"
    dest: "{{ pkg_dir }}/{{ item.name }}-{{ item.version }}.tar.gz"
    checksum: "{{ item.checksum | default(omit) }}"
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  with_items: "{{ zookeeper_packages }}"
  when: has_outbound_network

- name: download mysql
  get_url:
    url: "{{ item.url }}"
    dest: "{{ pkg_dir }}/{{ item.name }}-{{ item.version }}.tar.gz"
    checksum: "{{ item.checksum | default(omit) }}"
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  with_items: "{{ mysql_packages }}"
  when: has_outbound_network

# dolphinscheduler
- name: download dolphinscheduler front
  get_url:
    url: "{{ item.url }}"
    dest: "{{ pkg_dir }}/{{ item.name }}-{{ item.version }}.tar.gz"
    checksum: "{{ item.checksum | default(omit) }}"
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  with_items: "{{ dolphinscheduler_front_packages }}"
  when: has_outbound_network

#- name: unarchive dolphinscheduler front
#  unarchive: >
#    src="{{ downloads_dir }}/apache-dolphinscheduler-incubating-{{ dolphinscheduler_front_version }}.tar.gz"
#    dest="{{ pkg_dir }}/" mode=0755

- name: download dolphinscheduler backend
  get_url:
    url: "{{ item.url }}"
    dest: "{{ pkg_dir }}/{{ item.name }}-{{ item.version }}.tar.gz"
    checksum: "{{ item.checksum | default(omit) }}"
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  with_items: "{{ dolphinscheduler_backend_packages }}"
  when: has_outbound_network

#- name: unarchive dolphinscheduler backend
#  unarchive: >
#    src="{{ downloads_dir }}/apache-dolphinscheduler-incubating-{{ dolphinscheduler_backend_version }}.tar.gz"
#    dest="{{ pkg_dir }}/" mode=0755

- name: download mysql client
  get_url:
    url: "{{ item.url }}"
    dest: "{{ pkg_dir }}/{{ item.name }}-{{ item.version }}.jar"
    checksum: "{{ item.checksum | default(omit) }}"
    force: yes
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  with_items: "{{ mysql_client_jar }}"
  when: has_outbound_network

# clean
#- name: clean up download dir
#  shell: >
#    cd "{{ downloads_dir }}" && find . -mindepth 1 -maxdepth 1 -name "*.tar.gz" -exec rm -rf {} \;